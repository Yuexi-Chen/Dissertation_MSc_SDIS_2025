{
  "task_id": "task_4",
  "completeness": "minimal",
  "code_generation_instruction": "Return ONLY the code implementation without any explanation or markdown formatting.",
  "description": "Implement a medical resource allocation system for emergency triage that optimizes the number of patients saved by correctly prioritizing limited medical resources based on patient survival probability curves.",
  "implementation_requirements": [
    "1. Input/Output Requirements:",
    "   a. Do NOT modify the input data structures",
    "   b. Always return a complete object with: assignments, survivors, total_survival_probability",
    "   c. When no assignment is possible, return assignments as empty array but maintain the object structure",
    "   d. Follow the exact output format shown in the examples",
    
    "2. Algorithm Implementation (Resource Optimization):",
    "   a. Problem Definition:",
    "      - Each patient has a survival probability curve that decreases over time",
    "      - Patient arrays represent survival probabilities at each minute (index 0 = minute 0, index 1 = minute 1, etc.)",
    "      - Each medical resource takes time to apply and boosts survival probability",
    "      - Responders can only apply one resource at a time (one responder can only treat one patient at any given time)",
    "      - The goal is to maximize total survivors within the time constraint",
    
    "   b. Core Algorithm Steps:",
    "      - Step 1: Calculate each patient's survival probability at each possible treatment time",
    "        * Apply resource boost to the base probability and calculate final probability",
    "        * Account for probability decay while waiting for treatment",
    "      - Step 2: Implement a priority-based scheduling algorithm",
    "        * Use dynamic programming to find optimal resource-patient assignments",
    "        * Track responder availability over time (a responder becomes available after completing a treatment)",
    "        * Consider all possible resource combinations for each patient",
    "      - Step 3: Resolve conflicting resource demands",
    "        * A conflict occurs when multiple optimal treatments require the same responder at the same time",
    "        * Prioritize treatments that maximize total survival probability",
    "        * Consider sequential treatments for critical patients"
  ],
  "examples": [
    {
      "example_name": "Example 1: Simple Resource Allocation",
      "description": "Basic case with two patients and limited resources",
      "input": {
        "patients": [
          [90, 70, 50, 30, 10, 0],
          [80, 70, 60, 50, 30, 10]
        ],
        "resources": [
          {"time": 1, "boost": 20},
          {"time": 2, "boost": 40}
        ],
        "responders": 1,
        "total_time": 3
      },
      "output": {
        "assignments": [
          {"patient": 0, "resource": 1, "time": 0},
          {"patient": 1, "resource": 0, "time": 2}
        ],
        "survivors": 1,
        "total_survival_probability": 110
      }
    }
  ],
  "expected_output_fields": ["assignments", "survivors", "total_survival_probability"]
} 